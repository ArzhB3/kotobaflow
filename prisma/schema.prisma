datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

// Authentication models

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

// Application specific models

model User {
    id            String    @id @default(cuid())
    username      String
    name          String?
    email         String?   @unique
    image         String?
    bio           String?
    link          String?
    emailVerified DateTime?
    createdAt     DateTime  @default(now())

    accounts  Account[]
    sessions  Session[]
    posts     Post[]
    likes     Like[]
    followers Follow[]  @relation("follower")
    followeds Follow[]  @relation("followed")
}

model Follow {
    id          String   @id @default(cuid())
    followerId  String
    followingId String
    createdAt   DateTime @default(now())

    follower User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
    followed User @relation("followed", fields: [followingId], references: [id], onDelete: Cascade)
}

model Post {
    id        String   @id @default(cuid())
    userId    String
    parentId  String?
    content   String
    createdAt DateTime @default(now())

    user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
    likes   Like[]
    replies Post[] @relation("replies")
    parent  Post?  @relation("replies", fields: [parentId], references: [id], onDelete: Cascade)
}

model Like {
    id        String   @id @default(cuid())
    userId    String
    postId    String
    createdAt DateTime @default(now())

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
}
